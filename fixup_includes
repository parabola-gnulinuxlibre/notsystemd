#!/usr/bin/env bash

panic() {
        >&2 echo panic
        exit 2
}

out() {
        printf '%q ' "$@"
}

# system
# public
# protected
# private
classify() {
        local path=$1
        if [[ -f "${current_file%/*}/${path}" ]]; then
                out private "$path"
        elif [[ "$path" != systemd/* ]] &&
             [[ "$path" != libudev.h ]] &&
             cpp -include "$path" <<<'' &>/dev/null;
        then
                out system "$path"
        else
                case "$path" in
                        asm/sgidefs.h|dbus/dbus.h|efi.h|efilib.h|gio/gio.h|glib.h|libmount.h|linux/auto_dev-ioctl.h)
                                out system "$path"
                                ;;
                        util.h|*/util.h)
                                if [[ "$current_file" = */systemd-boot/* ]]; then
                                        out private util.h
                                else
                                        out protected basic/util.h
                                fi
                                ;;
                        *)
                                file=$(find src -type f -name "${path##*/}")
                                if [[ -f "$file" ]]; then
                                        case "$file" in
                                                */src/*)
                                                        if [[ "${current_file%/*}" = "${file%/*}" ]]; then
                                                                out private "${file##*/}"
                                                        else
                                                                out protected "${file##*/src/}"
                                                        fi
                                                        ;;
                                                */libsystemd/include/*|*/libudev/include/*)
                                                        out public "${file##*/include/}"
                                                        ;;
                                                */include/*)
                                                        out protected "${file##*/include/}"
                                                        ;;
                                                *)
                                                        if [[ "${current_file%/*}" = "${file%/*}" ]]; then
                                                                out private "${file##*/}"
                                                        else
                                                                out protected "${file##*/}"
                                                        fi
                                                        ;;
                                        esac
                                else
                                        >&2 printf 'Cannot figure out: %q\n' "$path"
                                        panic
                                fi
                                ;;
                esac
        fi
}

phase=phase0
hook=:

phase0() {
        phase=phase0
        hook=:
        local line="$1"
        if [[ $line == '#include'* ]]; then
                phase1 "$line"
        else
                printf '%s\n' "$line"
        fi
}

phase1_tail=
system=()
public=()
protected=()
private=()
phase1_flush() {
        local b=:
        if [[ ${#system[@]} -gt 0 ]]; then
                printf '%s\n' "${system[@]}" | sort -u
                b=echo
        fi
        if [[ ${#public[@]} -gt 0 ]]; then
                $b
                printf '%s\n' "${public[@]}" | sort -u
                b=echo
        fi
        if [[ ${#protected[@]} -gt 0 ]]; then
                $b
                printf '%s\n' "${protected[@]}" | sort -u
                b=echo
        fi
        if [[ ${#private[@]} -gt 0 ]]; then
                $b
                printf '%s\n' "${private[@]}" | sort -u
        fi
        printf '%s' "$phase1_tail"
}
phase1() {
        phase=phase1
        hook=phase1_flush
        local line="$1"
        case "$line" in
                '')
                        phase1_tail+=$'\n'
                        ;;
                '#include'*)
                        phase1_tail=''
                        local re='^#include [<"]([^">]*)[">](.*)'
                        if [[ "$line" =~ $re ]]; then
                                IFS=' '
                                read -r class path < <(classify "${BASH_REMATCH[1]}")
                                case "$class" in
                                        system)
                                                printf -v line '#include <%s>%s' "$path" "${BASH_REMATCH[2]}"
                                                system+=("$line")
                                                ;;
                                        public)
                                                printf -v line '#include <%s>%s' "$path" "${BASH_REMATCH[2]}"
                                                public+=("$line")
                                                ;;
                                        protected)
                                                printf -v line '#include "%s"%s' "$path" "${BASH_REMATCH[2]}"
                                                protected+=("$line")
                                                ;;
                                        private)
                                                printf -v line '#include "%s"%s' "$path" "${BASH_REMATCH[2]}"
                                                private+=("$line")
                                                ;;
                                esac
                        else
                                panic
                        fi
                        ;;
                *)
                        phase1_flush
                        phase2 "$line"
                        ;;
        esac
}

phase2() {
        phase=phase2
        hook=:
        local line="$1"
        printf '%s\n' "$line"
        cat
}

main() {
        current_file="$1"
        printf ' => %s\n' "$current_file"
        set -o pipefail
        {
                IFS=''
                while read -r line; do
                        "$phase" "$line"
                        IFS=''
                done
                "$hook"
        } < "$current_file" > "$current_file.tmp"
        mv -Tf "$current_file.tmp" "$current_file"
}

main "$@"
